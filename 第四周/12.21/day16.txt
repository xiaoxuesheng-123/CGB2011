一,Map接口
	--1,代码
		package cn.tedu.util;

		import java.util.*;

		//测试 Map接口
		public class Test4_Map {
		    public static void main(String[] args) {
		        //1,创建 多态对象
		        Map<Integer,String> map = new HashMap();
		        //2,调用方法
		        map.put(9527,"唐伯虎");
		//TODO 必须添加键值对的数据.可以同时约束,k和v的数据类型
		        map.put(9528,"秋香姐");
		        map.put(9529,"石榴姐");
		        //TODO 当key相同时,原来的value会被覆盖
		        map.put(9528,"秋香姐2");
		 //TODO {9527=唐伯虎, 9528=秋香姐2, 9529=石榴姐}
		        System.out.println(map);
		        //根据key获取value
		        System.out.println(map.get(9527));
		//        map.clear();//清空集合
		        //判断是否包含指定的key
		        System.out.println(map.containsKey(9528));
		        //判断是否包含指定的value
		        System.out.println(map.containsValue(100));
		        //判断是否相等
		        System.out.println(map.equals(999));
		        //获取哈希码值
		        System.out.println(map.hashCode());
		        //判断是否为空map
		        System.out.println(map.isEmpty());
		        //获取map长度
		        System.out.println(map.size());
		        //根据key移除记录,并返回value的值null
		        System.out.println(map.remove(9529));
		        //TODO 迭代map集合
		//TODO 方式1:Set<K> keySet()-把map里的key们存入set
		        Set<Integer> keys = map.keySet();
		        //迭代set,获取每个key
		        for (Integer  key : keys){
		            //拿着key回map里找value
		            String value = map.get(key);
		            if(value.equals("秋香姐2")){
		                System.out.println(value+",加个微信呗~");
		            }
		            System.out.println(key + value);
		        }
		//TODO 方式2:Collection<V> values()--把map里的value们存入Collection
		        //调用values()
		        Collection<String> values = map.values();
		        // 遍历Collection获取每个value
		        for(String value : values){
		            System.out.println(value);
		        }
		//TODO 方式3:Set<Map.Entry<K,V>> entrySet()
		//          --把map里的key和value一起存入set
		        //调用entrySet(),迭代set获取每个Entry
		        //自动补齐等号左侧: alt + 回车
		        Set<Map.Entry<Integer,String>> set = map.entrySet();
		        //调用Entry提供的方法获取key和value
		        for(Map.Entry<Integer,String> entry :set){
		            //解析Entry封装的key
		            Integer key = entry.getKey();
		            //解析Entry封装的value
		            String value = entry.getValue();
		            System.out.println(key+value);
		        }
		    }
		}


二,HashMap
	--1,概述
		实现了Map接口,数据是无序的,可以存					null值null键.
	--2,创建对象
		HashMap() 
      构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。
	--3,常用方法
		同Map接口,略
	--4,测试
		package cn.tedu.util;

		import java.util.Collection;
		import java.util.HashMap;
		import java.util.Map;
		import java.util.Set;

		//测试 HashMap
		public class Test1_HashMap {
		    public static void main(String[] args) {
		       //1,创建对象
		       HashMap<Integer,String> map = new HashMap();
		       //2,调用方法
		       map.put(1,"蔡徐坤");
		       map.put(2,"王一博");
		       map.put(2,"刘德华");
		       map.put(3,"肖战");
		       map.put(4,"靳东");
		       map.put(5,"易烊千玺");
		       System.out.println(map);
		       //迭代map集合
		       for(Integer key : map.keySet()){
		           String value = map.get(key);
		           System.out.println(key+value);
		       }
		       for (String value : map.values()) {
		           System.out.println(value);
		       }
		//       map.entrySet();
		       //把key和value封装成Entry对象存入set
		        for(Map.Entry<Integer, String> entry : map.entrySet() ) {
		            Integer key = entry.getKey();
		            String value = entry.getValue();
		            System.out.println(key+value);
		        }
		    }
		}

	--5,原理
		略...
	--6,练习:
		统计字符串中的字符个数
		package cn.tedu.util;

		import java.util.HashMap;
		import java.util.Scanner;

		//map的练习
		public class Test2_Map {
		    public static void main(String[] args) {
		        //统计字符串中的字符个数
		        System.out.println("请输入字符串:");
		        String input = new Scanner(System.in).nextLine();
		        //定义map存数据 {a=null,b=3,c=5}
		        HashMap<Character,Integer> map = new HashMap();
		        //遍历字符串,得到每个字符
		        for (int i = 0; i < input.length(); i++) {
		            //根据下标,获取字符
		            char key = input.charAt(i);
		            Integer value = map.get(key);
		            if(value==null){//如果是null就是没存过,直接存1
		                map.put(key,1);
		            }else{//如果不是null,就+1
		                map.put(key,value+1);
		            }
		        }
		        //abac   {a=2, b=1, c=1}
		        System.out.println(map);
		    }
		}

三,多线程
	--1,概述
		用来提高程序的执行效率,充分利用CPU的执行权
	--2,面试题
		--进程和线程的区别
			进程是:正在运行的程序,一个软件的运行需要依						 赖一个或者多个进程
			线程是:操作系统能够调度的最小单位,被包含在							进程里.一个进程可以包含一个线程(单							线程),也可以包含多个线程(多线程).
			总结:一个进程包含一个或者多个线程
		--并行和并发的区别
			并发是:发生了抢的现象.抢占共享资源.
			并行是:没抢,多个CPU同时各自处理一个任务.
		--多线程的状态
			刚new出来的是新建状态
			调用start()把线程从新建状态变成可运行状态,等待CPU的调度
			被CPU选中时,变成运行状态,开始干活
			理想状态,就就从运行状态变成终止状态
			更多的情况,会从运行状态变成阻塞状态
四,多线程编程
	--1,继承Thread类
		--创建对象
			Thread() 
	          分配新的 Thread 对象。 
			Thread(Runnable target) 
			          分配新的 Thread 对象。 
			Thread(Runnable target, String name) 
	         分配新的 Thread 对象。 
		--调用方法
			static Thread currentThread() 
          返回对当前正在执行的线程对象的引用。 
			long getId() 
			          返回该线程的标识符。 
			String getName() 
			          返回该线程的名称。 
			void run() 
			void setName(String name) 
			  改变线程名称，使之与参数 name 相同。 
			static void sleep(long millis) 
			void start() 
			  使该线程开始执行；Java 虚拟机调用该线程的 run 方法。 
			void stop() 
		    已过时。  
		--简单测试
			package cn.tedu.lang;
			//测试 Thread
			public class Test3_Thread {
			    public static void main(String[] args)
			            throws InterruptedException {
			        //1,创建对象
			        Thread t = new Thread();
			        //2,调用方法
			        System.out.println( t.getId() );//获取线程id
			        System.out.println( t.getName() );//获取线程名称Thread-0
			        t.run();
			        t.setName("tony");//设置线程的名称
			        System.out.println( t.getName() );
			        t.start();//开启线程
			        t.stop();//结束线程
			        //让线程休眠10ms
			        Thread.sleep(10);

			//        获取正在执行任务的线程对象的引用
			        Thread t2 = Thread.currentThread();
			        System.out.println(t2.getName());//main
			    }
			}

		--复杂测试
			package cn.tedu.lang;
			//模拟多线程编程
			public class Test4_Thread {
			    public static void main(String[] args) {
			        //3,使用线程类
			        MyThread t = new MyThread();//新建状态
			//        t.run();//普通的方法调用,没有抢的多线程效果
			        t.start();//可运行状态,等着CPU选中
			        //TODO 模拟多线程
			        MyThread t2 = new MyThread();
			        //4,启动线程 + 找到线程里的run()执行
			        t2.start();
			        /*
			        多线程的随机性:全是CPU调度的,程序无法控制
			            Thread-0===0
			            Thread-1===0
			            Thread-1===1
			            Thread-0===1
			            Thread-0===2
			         */
			    }
			}
			//1,定义线程类--继承Thread类
			class MyThread extends Thread{
			    //2,自己的业务--必须放在重写的run()里
			    @Override
			    public void run() {//运行状态
			        for (int i = 0; i < 10; i++) {
			            //打印10次线程名称
			            System.out.println(super.getName()+"==="+i);
			        }
			    }//终止状态
			}
	--2,实现Runnable接口
		--调用方法
			void run()  
		--测试
			package cn.tedu.lang;
			//测试 模拟多线程编程
			public class Test5_Thread {
			    public static void main(String[] args) {
			        //3,使用线程类
			        MyRunnable target = new MyRunnable();
			        //绑定关系
			        Thread t = new Thread(target);
			        t.start();//启动线程

			        Thread t2 = new Thread(target);
			        t2.start();//启动线程
			        /*多线程的随机性
			            Thread-1~~3
			            Thread-1~~4
			            Thread-0~~0
			            Thread-1~~5
			            Thread-0~~1
			         */
			    }
			}
			//1,定义线程类--实现Runnable接口
			class MyRunnable implements Runnable{
			    //2,把业务 放在重写的run()
			    @Override
			    public void run() {
			        for (int i = 0; i < 10; i++) {
			            //获取线程名称:Thread.currentThread().getName()
			            System.out.println(Thread.currentThread().getName()+"~~"+i);
			        }
			    }
			}



扩展:
	--0,了解线程池的技术
	--1,面试题:
		--HashMap的原理
	--2,看视频-我的课程-去学习-开始学习
	--3,debug/断点 模式
			在开发阶段,用来跟踪代码的执行结果
		设置断点:单击
		触发断点:右键-debug
		执行代码: f8是下一步 / ctrl+f2结束