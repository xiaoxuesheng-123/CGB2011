一,异常
	--1,体现多态:
		好处1:统一调用的标准(向父类看齐)
		好处2:不关心具体的子类的类型,会把子类当父类来看.屏蔽了子类间的不同,写出通用的代码
		异常里,程序中出现的所有bug都应该处理,
		如果不知道要处理哪个异常,不知道要处理的异常还有几个.没法再写了.....
		用多态解决的,直接把父类Exception处理
		
	--2,代码
		package cn.tedu.oop;

		import java.util.InputMismatchException;
		import java.util.Scanner;

		//测试 异常的处理
		public class Test6_Exception {
			public static void main(String[] args) {
		//		method();//暴露异常
		//		method2();//捕获异常
				
		//TODO 调用了有异常的代码,要么捕获要么抛出
				try{
					method3();//抛出异常
				}catch(Exception a){//多态
					System.out.println("执行错误!");
				}
			}
			//抛出异常:自己不管,交给调用者
			/*
			 	throws 异常类型1,异常类型2...
			 */
			public static void method3() 
					throws ArithmeticException ,
					       InputMismatchException ,
						   Exception//多态
			{
				int a = new Scanner(System.in).nextInt();
				int b = new Scanner(System.in).nextInt();
				System.out.println(a/b);
			}
			//捕获异常:自己处理
			/*
			 	try{
					有可能出问题的代码
				}catch(异常的类型 变量名){
					给出的方案
				}
			 */
			public static void method2() {
				try{
					int a = new Scanner(System.in).nextInt();
					int b = new Scanner(System.in).nextInt();
					System.out.println(a/b);
				}catch(ArithmeticException x){
					System.out.println("第二次输入不能为0!");
				}catch(InputMismatchException x){
					System.out.println("请输入两次整数!");
				}catch(Exception x){//多态...
					System.out.println("请输入正确的数据.");
				}
				//还有哪些异常,那些异常的名字是什么???
				//通用的解决方案,可以用多态
				//多态里根本不关心,具体的子类有几个,叫什么
				//多态把子类当父类来看,更通用
			}
			//暴露异常
			public static void method() {
				//接收用户输入的两个整数,做除法
				int a = new Scanner(System.in).nextInt();
				int b = new Scanner(System.in).nextInt();
				System.out.println(a/b);
			}
		}


二,抽象类
	--1,概述
		如果类里有抽象方法,那么这个类必须修饰成抽象类.
		如果一个方法,没有方法体,那么这个方法必须是一个抽象方法.
		抽象类是程序设计的结果,用来优化父类的
	--2,特点
		--通过java关键字abstract实现
		--可以修饰方法或者类
		--抽象类中可以没有抽象方法（由子类去实现）
		--如果类中有抽象方法，那该类必须定义为一个抽象类
		--子类继承了抽象类以后，要么还是一个抽象类，要么就把所有抽象方法都重写
		--多用于多态中
		--抽象类不可以被实例化
	--3,测试	
		package cn.tedu.oop;
		//测试 抽象类的特点
		public class Test1_Abstract {
			public static void main(String[] args) {
				//TODO 抽象类不能被实例化
		//		Fu f = new Fu();
				Fu f = new Zi();//多态
				//多态对象,只能调用父类的功能
				f.eat();
				f.he();
			}
		}
		//TODO 1,抽象类是程序设计的结果,不提供了方法体
		//TODO 3,类里包含抽象方法,就是一个抽象类
		//TODO 4,抽象类灵活,可以有普通方法,也可以是抽象方法
		abstract class Fu{
			public void eat(){
				System.out.println("吃饭");
			}
			//TODO 2,没有方法体的方法叫 抽象方法
			abstract public void he();
		}
		//TODO 子类继承抽象类以后,可以是一个抽象的子类
		//abstract class Zi extends Fu{  }
		//TODO 子类继承抽象类以后,可以重写抽象方法
		//TODO 子类需要重写哪些方法?
		//抽象方法必须重写,否则是一个抽象的子类
		//普通方法不必须,,,想改的时候才重写
		class Zi extends Fu{
			//重写抽象方法:
		//	abstract public void he();
			@Override
			public void he() {
				System.out.println("喝茶");
			} 
		}

三,抽象类的使用
	--1,构造方法/成员变量
		package cn.tedu.oop;
		//测试 使用抽象类
		//总结:
		//1,抽象类里 有 构造方法,不是为了自己new,为了子类new
		//2,抽象类里 有变量,有常量
		//3,常量的值一旦定义就不能改了.
		//4,继承时,除了private和构造方法,都可以被继承的
		public class Test2_Use {
			public static void main(String[] args) {
				//TODO 
				Fu2 f = new Zi2();
				f.name = "小芳" ;//修改变量的值
				System.out.println(f.name);//获取变量的值
			
		//		Fu2.MAX_VALUE = 120;//常量的值不能改
			}
		}
		abstract class Fu2{
		//TODO 1,抽象类里可以有 -- 构造函数
		//构造方法用来new,抽象类不能new?--为了子类new
			public Fu2(){
				System.out.println(1);
			}
		//TODO 2,抽象类里可以有 -- 成员变量
			String name = "小潘" ;
		//TODO 3,抽象类里可以有 -- 常量 
			public static final int MAX_VALUE = 127;
			
		}
		class Zi2 extends Fu2{ 
			public Zi2(){
				super();
				System.out.println(2);
			}
		}

	--2,成员方法
		package cn.tedu.oop;
		//测试 使用抽象类
		//总结:
		//1,抽象类很灵活,因为可以有普通方法也可以有抽象方法
		//2,子类继承抽象类以后,
			//要么就还是一个抽象类(包含着抽象方法)
			//要么是重写 所有 抽象方法
		//3,子类怎么决定到底要重写哪个方法呢?
			//对于普通方法,想改就重写
			//对于抽象方法,不重写全 的话,就是一个抽象的子类
		public class Test3_Use {
			public static void main(String[] args) {
				//TODO 
			}
		}
		//TODO 抽象类里都是抽象方法
		abstract class Fu3{
			 abstract void save1();
			 abstract void save2();
			 abstract void save3();
		}
		abstract class Zi3 extends Fu3{
		//要么是一个抽象的类,要么重写所有抽象方法
		//	abstract void save1();
			void save1(){
				System.out.println(1);
			}
		}
		//TODO 抽象类里都是普通方法
		abstract class Fu4{
		  public void delete1(){System.out.println(1);}
		  public void delete2(){System.out.println(2);}
		  public void delete3(){System.out.println(3);}
		}
		class Zi4 extends Fu4{
		//由于抽象类里,没有抽象方法,都是普通方法
		//普通方法不是必须重写的??想改时才重写.
		}
		//TODO 抽象类里有普通方法和抽象方法
		abstract class Fu5{
			public void get1(){
				System.out.println(1);
			}
			abstract public void get2();
		}
		class Zi5 extends Fu5{
			//重写 所有的 抽象方法,否则是一个抽象的子类
			 public void get2(){
				 System.out.println(2);
			 }
		}

四,接口
	--1,概述
		接口为了突破java单根继承的局限性而来
		接口支持多继承,多实现,在继承的同时多实现
	--2,特点
		--接口中都是抽象方法
		--通过interface关键字创建接口
		--通过implements让子类来实现
		--可以理解成，接口是一个特殊的抽象类
		--接口突破了java的单继承的局限性
		--接口和类之间可以多实现，接口和接口之间可以多继承
		--接口是对外暴露的规则，是一套开发规范
		--接口提高了程序的功能扩展，降低了耦合性
	--3,测试	
		package cn.tedu.oop;
		//测试 接口
		public class Test4_Interface {
			public static void main(String[] args) {
				//TODO 3,测试
		//		A a = new A();//A接口不能new
		//		A a = new B();//B抽象类不能new
				A a = new C();//多态
				//可以用A 的功能
				a.eat();
				a.drink();
				a.la();
			}
		}
		//1,interface定义接口,都是抽象方法
		//TODO 接口是一个特殊的抽象类,特殊在全是抽象方法
		interface A{
			abstract public void eat();
			abstract public void drink();
			abstract public void la();
		}
		//2,实现类使用接口,发生实现关系implements
		abstract class B implements A{
			//实现类 要么是一个抽象类(包含抽象方法)
		}
		class C implements A{
			//实现类 要么重写所有抽象方法
			public void eat(){
				System.out.println("吃");
			}
			public void drink(){
				System.out.println("喝");
			}
			public void la(){
				System.out.println("啦");
			}
		}

五,接口的用法
	--1,测试
		package cn.tedu.oop;
		//测试 接口的使用
		public class Test5_UseInter {
			public static void main(String[] args) {
				//TODO
				Inter in = new InterImpl();
		//		in.age = 20;//age是final的
				System.out.println(in.age);
				System.out.println(Inter.age);//age是static的
			}
		}
		//接口里的资源,都是public的
		interface Inter{
			//TODO 1,接口里有构造方法吗 -- 没有
		//	public Inter(){}
			//TODO 2,接口里有变量吗 -- 没有!!
			int age = 10;//常量的简写
		//接口的常量,会自动拼接public static final
		//	public static final int age = 10;
			//TODO 3,接口里的抽象方法 --有
			void add();//抽象方法的简写
		//接口会为简写的抽象方法,自动拼接public abstract  
		//	abstract public void add();
		}
		class InterImpl implements Inter{
			public void add(){
				System.out.println("保存数据.");
			}
		}

	--2,复杂用法
		--接口支持多继承,多实现,在继承的同时多实现
		--代码
			package cn.tedu.oop;
			//测试 接口的复杂用法
			public class Test6 {
				public static void main(String[] args) {
					//TODO 多态对象测试
			//		Inter3 in = new IntererImpl();
			//右侧的实现类和左侧的接口并没有实现关系
					
					Inter1 in = new IntererImpl();
				//多态对象,只能调用左侧提供的功能
			//所以左侧写哪个接口,要看你想用哪个接口的功能
					in.save();
			//		in.get();
				}
			}
			//定义接口
			interface Inter1{
				void save();
			}
			interface Inter2{
				void get();
			}
			//TODO 接口间--是继承关系,而且可以多继承(逗号隔开)
			interface Inter3 extends Inter1 , Inter2{
				//同时拥有1 2 3接口的功能
				void delete();
			}
			//TODO 实现 类和接口--是实现关系,还能多实现
			class IntererImpl 
							implements Inter1 , Inter2{
			//要重写1 2 接口里的抽象方法,否则就是抽象类!
			//TODO 接口里的方法,是public的,重写时要有权限!
				public void save(){
					System.out.println(1);
				}
				public void get(){
					System.out.println(2);
				}
			}



扩展:
	--1,作业
		--安装IDEA,并测试HelloWorld,下周开始用
		--程序设计题:
			具体事物:cgb老师 / Scala老师
			共性:讲课 / 备课
			测试:创建多态对象测试
			要求:利用面向抽象编程实现和面向接口编程实现
	--2,面试题:
		--1,向上造型和向下造型的区别
			向上造型就是多态,为了标准化,向父类看齐
				--Father f = new Son();
			向下造型为了使用子类特有的扩展的
				--Son son = (Son) f ;
		--2,抽象类和接口的区别	
		